Top App Bar

	! Если используем Bottom Navigation, то зачастую используется и Top App Bar. (Он есть во всех топовых приложениях)
	! В этом примере используется Top App Bar и Bottom Navigation - ВМЕСТЕ.
	! Top App Bar смещает основной контейнер экрана вниз. (Поэтому грузим его в один контейнер с Контейнером контента)
	! В Top App Bar иконки ОБЫЧНО подразумевают переход на полноценное другое АКТИВИТИ.
	! Файл color.xml с кастомными цветами при тапе - здесь не работает.
	! Прописывать Интерфейс (в kt) для Top App Bar не нужно. (Как например, для старого метода реализации Bottom Navigation)
	! Название приложения в strings.xml - здесь используется.
	
-----------------------------------------------------
	
1) Создаем Top App Bar.	
	
	! Создать меню: menu - New - Menu Resource File - name: top_menu
	! Создаем 3 белых иконки: drawable - New - Vector Asset (menu, favorites, settings)
	! Создаем 2 стринга в ресурсах: FAVORITES, SETTINGS
	! Создаем 2 Фрагмента: Favorites, Settings

-----------------------------------------------------

Дальше: top_menu.xml
	
	<?xml version="1.0" encoding="utf-8"?>
	<menu
		xmlns:android="http://schemas.android.com/apk/res/android"
		xmlns:app="http://schemas.android.com/apk/res-auto">

		// Создаем 2 итема в top_menu.xml (Эти иконки отображатся слева на баре)
		<item
			android:id="@+id/favoritesTopItemId"
			android:icon="@drawable/favorites"
			android:title="@string/favorites"
			app:showAsAction="ifRoom"/>

		<item
			android:id="@+id/settingsTopItemId"
			android:icon="@drawable/settings"
			android:title="@string/settings"
			app:showAsAction="ifRoom"/>

	</menu>
	
-----------------------------------------------------

Добавляем контент во все 2 Фрагмента: (Иконка по середине экрана)

	<?xml version="1.0" encoding="utf-8"?>
	<FrameLayout
		xmlns:android="http://schemas.android.com/apk/res/android"
		xmlns:tools="http://schemas.android.com/tools"
		xmlns:app="http://schemas.android.com/apk/res-auto"
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		tools:context=".Settings">

		<androidx.constraintlayout.widget.ConstraintLayout
			android:layout_width="match_parent"
			android:layout_height="match_parent">

			<androidx.appcompat.widget.AppCompatTextView
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				app:layout_constraintTop_toTopOf="parent"
				app:layout_constraintBottom_toBottomOf="parent"
				app:layout_constraintStart_toStartOf="parent"
				app:layout_constraintEnd_toEndOf="parent"
				android:text="@string/settings"/>

		</androidx.constraintlayout.widget.ConstraintLayout>

	</FrameLayout>
	
-----------------------------------------------------

Дальше: activity_main.xml

	! Топ Апп Бар и Содержимое фрагмента помещаем в один Линеар Лайоут

	<?xml version="1.0" encoding="utf-8"?>
	<layout
		xmlns:android="http://schemas.android.com/apk/res/android"
		xmlns:app="http://schemas.android.com/apk/res-auto"
		xmlns:tools="http://schemas.android.com/tools">

		// Главный контейнер Активити
		<androidx.constraintlayout.widget.ConstraintLayout
			android:layout_width="match_parent"
			android:layout_height="match_parent"
			tools:context=".MainActivity">
			
			// Линейный макет горизонтал для Top App Bar
			<androidx.appcompat.widget.LinearLayoutCompat
				android:layout_width="match_parent"
				android:layout_height="match_parent"
				android:orientation="vertical">

				<androidx.coordinatorlayout.widget.CoordinatorLayout
					android:id="@+id/sectTopBar"
					android:layout_width="match_parent"
					android:layout_height="match_parent"
					// Стандарт веса для Апп бара (Определен гуглом)
					android:layout_weight="13.1">

					<com.google.android.material.appbar.AppBarLayout
						android:layout_width="match_parent"
						android:layout_height="wrap_content">

						<com.google.android.material.appbar.MaterialToolbar
							android:id="@+id/topAppBar"
							android:layout_width="match_parent"
							// Высота Апп бара равна 30dp
							android:layout_height="?attr/actionBarSize"
							android:background="@color/black"
							app:title="@string/app_name"
							app:titleTextColor="@color/white"
							app:menu="@menu/top_menu"
							app:navigationIcon="@drawable/menu"
							// Один из стилей построения Апп Бара (Определенный Гуглом)
							style="@style/Widget.MaterialComponents.Toolbar.Primary"/>

					</com.google.android.material.appbar.AppBarLayout>

				</androidx.coordinatorlayout.widget.CoordinatorLayout>

				<FrameLayout
					android:id="@+id/content"
					android:layout_width="match_parent"
					android:layout_height="match_parent"
					// Стандарт веса для Фрагмента (определенный гуглом) при юзе с Апп БАром
					android:layout_weight="1"/>

			</androidx.appcompat.widget.LinearLayoutCompat>

			<androidx.coordinatorlayout.widget.CoordinatorLayout
				android:layout_width="match_parent"
				android:layout_height="wrap_content"
				app:layout_constraintBottom_toBottomOf="parent"
				app:layout_constraintStart_toStartOf="parent"
				app:layout_constraintEnd_toEndOf="parent">

				<com.google.android.material.bottomnavigation.BottomNavigationView
					android:id="@+id/bottomNav"
					android:layout_width="match_parent"
					android:layout_height="?attr/actionBarSize"
					android:background="@color/black"
					android:elevation="16dp"
					app:itemIconTint="@color/color_tab"
					app:itemTextColor="@color/color_tab"
					app:menu="@menu/bottom_menu"/>

			</androidx.coordinatorlayout.widget.CoordinatorLayout>


		</androidx.constraintlayout.widget.ConstraintLayout>
	</layout>
	
-----------------------------------------------------

Дальше: MainActivity.kt

	! Топ Апп Бар реализуем через отдельный метод в классе (В отличии от нового способа реализации Bottom Navigation)
	
	class MainActivity : AppCompatActivity() {

		private var binding: ActivityMainBinding? = null

		override fun onCreate(savedInstanceState: Bundle?) {
			super.onCreate(savedInstanceState)
			binding = DataBindingUtil.setContentView(this, R.layout.activity_main)
			
			// Подгружаем на стартовый экран Топ Апп Бар, при старте приложения (Делаем его активным)
			setSupportActionBar(binding?.topAppBar)
			
			// Подгружаем на стартовый экран фрагмент Home, при старте приложения
			supportFragmentManager.beginTransaction().replace(R.id.content, Home()).commit()

			// Реализуем Боттом Навигатион по новому способу
			binding?.bottomNav?.setOnItemSelectedListener { item ->
				when (item.itemId) {
					// Говорим, что при тапе по иконке Home - грузится на экран фрагмент Хоме
					R.id.homeItemId -> supportFragmentManager.beginTransaction().replace(R.id.content, Home()).commit()
					R.id.shopItemId -> supportFragmentManager.beginTransaction().replace(R.id.content, Shop()).commit()
					R.id.deliveryItemId -> supportFragmentManager.beginTransaction().replace(R.id.content, Delivery()).commit()
					R.id.accountItemId -> supportFragmentManager.beginTransaction().replace(R.id.content, Account()).commit()
				}

				return@setOnItemSelectedListener true

			}
			
			// На боттом навигатион иконка Home будет активна при старте приложения
			binding?.bottomNav?.selectedItemId = R.id.homeItemId
			
			// Реализуем Топ Апп Бар
			binding?.topAppBar?.setOnMenuItemClickListener { menuItem: MenuItem ->

				when (menuItem.itemId) {
					R.id.favoritesTopItemId -> {
						// Говорим, что при тапе по Фаворит иконке Топ Апп Бара - грузится на экран Фрагмент Фаворит
						supportFragmentManager.beginTransaction().replace(R.id.content, Favorites()).commit()

						true
					}

					R.id.settingsTopItemId -> {
						supportFragmentManager.beginTransaction().replace(R.id.content, Settings()).commit()

						true
					}

					else -> false
				}

			}
		}

		override fun onCreateOptionsMenu(menu: Menu): Boolean {

			val menuInflater = menuInflater
			menuInflater.inflate(R.menu.top_menu, menu)

			return true

		}
	}